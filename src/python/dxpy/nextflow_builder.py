import os

NF_PATH_LOCAL = ".dx_nextflow/"
DXAPP = ".dx_nextflow/dxapp.json"
EXEC = ".dx_nextflow/nextflow.sh"
EXEC_CONTENT = '''
# #!/usr/bin/env bash
# apt install wget -y
# wget -q0- https://get.nextflow.io | bash
# mv nextflow /usr/bin
# 
# nextflow run /
#!/usr/bin/env python3
#!/usr/bin/env python3
# cloud_workstation 2.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://documentation.dnanexus.com/developer for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import datetime
import sys

import dxpy

# in case PYTHONPATH is not set correctly
sys.path.append("/usr/lib/python3/")

import asset_builder_tools
import dx_utils

TIMEOUT_FILE = '/home/dnanexus/.dx.timeout'
TIME_FORMAT = '%Y %m %d %H %M %S'

SERVER_READY_TAG = 'server_running'


def _get_timeout():
    with open(TIMEOUT_FILE, 'r') as fh:
        timeout = fh.read().strip()
    return datetime.datetime.strptime(timeout, TIME_FORMAT)


@dxpy.entry_point('main')
def main(**job_inputs):
    asset_builder_tools.create_before_file_list()

    if 'snapshot' in job_inputs:
        cmd = 'dx cat {0} | sudo tar -C / -zxvf - '.format(job_inputs['snapshot']['$dnanexus_link'])
        dx_utils.run_cmd(cmd)
    if 'fids' in job_inputs:
        for fid in job_inputs['fids']:
            cmd = 'dx download {0}'.format(fid['$dnanexus_link'])
            dx_utils.run_cmd(cmd)

    # Loop until it's time to quit
    dx_utils.run_cmd('dx-set-timeout {0} '.format(job_inputs['max_session_length']))
    dx_utils.run_cmd('sudo chmod 666 {0} '.format(TIMEOUT_FILE))

    cmd = ['dx', 'tag', dxpy.JOB_ID, SERVER_READY_TAG]
    dx_utils.run_cmd(cmd)


    # Loop until it's time to quit
    while True:
        dx_utils.run_cmd(["sleep", "10"])
        timeout = _get_timeout()
        if datetime.datetime.now() > timeout:
            break
    output = {}
    return output

dxpy.run()

'''
DXAPP_CONTENT = '''
{
  "name": "nextflow",
  "title": "nextflow",
  "summary": "nextflow",
  "dxapi": "1.0.0",
  "openSource": true,
  "billTo": "org-dnanexus_apps",
  "version": "1.0.0",
  "inputSpec": [
      {
      "name": "max_session_length",
      "label": "Maximum Session Length (suffixes allowed: s, m, h, d, w, M, y)",
      "help": "The maximum length of time to keep the workstation running.  Value should include units of either s, m, h, d, w, M, y for seconds, minutes, hours, days, weeks, months, or years respectively.",
      "class": "string",
      "optional": false,
      "default": "1h"
    },
    {
      "name": "fids",
      "label": "Files",
      "help": "An optional list of files to download to the cloud workstation on startup.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "snapshot",
      "label": "Snapshot",
      "help": "An optional snapshot file to restore the workstation environment.",
      "class": "file",
      "optional": true
    }
  ],
  "outputSpec": [
  ],
  "runSpec": {
    "interpreter": "python3",
    "execDepends": [
      {
        "name": "ipython3"
      },
      {
        "name": "pkg-config"
      },
      {
        "package_manager": "pip",
        "name": "packaging"
      }
    ],
    "distribution": "Ubuntu",
    "release": "20.04",
    "file": "nextflow.sh",
    "version": "0"
  },
  "regionalOptions": {
    "aws:us-east-1": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_v2_x8"
        }
      }
    }
  },
  "details": {
    "whatsNew": "1.0.0: initial version"
  },
  "categories": [],
  "access": {
    "network": [
      "*"
    ],
    "project": "CONTRIBUTE",
    "allProjects": "VIEW"
  },
  "ignoreReuse": true
}
'''
def prepare_nextflow():
    print("here")
    if not os.path.exists(NF_PATH_LOCAL):
        os.makedirs(NF_PATH_LOCAL)
    print("here2")
    with open(DXAPP, "w") as dxapp:
        dxapp.write(DXAPP_CONTENT)
    print("here3")
    with open(EXEC, "w") as exec:
        exec.write(EXEC_CONTENT)
    print("here4")